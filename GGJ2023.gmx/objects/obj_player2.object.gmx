<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementspeed = 12.5;

UpSpeed = 0;
DownSpeed = 0;
LeftSpeed = 0;
RightSpeed = 0;

DownMovementSpeed = movementspeed;
UpMovementSpeed = movementspeed;
LeftMovementSpeed = movementspeed;
RightMovementSpeed = movementspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//device_get_tilt_x()
//device_get_tilt_y()
//device_get_tilt_z()




//DOWN
if (device_get_tilt_x() &gt; 0)
{
    DownSpeed = device_get_tilt_x();
    DownDirection = true;
    UpDirection = false;
}
//UP
if (device_get_tilt_x() &lt; 0)
{
    UpSpeed = device_get_tilt_x();
    DownDirection = false;
    UpDirection = true;
}
//LEFT
if (device_get_tilt_y() &lt; 0)
{
    LeftSpeed = device_get_tilt_y();
    LeftDirection = true;
    RightDirection = false;
}
//RIGHT
if (device_get_tilt_y() &gt; 0)
{
    RightSpeed = device_get_tilt_y();
    LeftDirection = false;
    RightDirection = true;
}


//x = clamp(x, sprite_width / 2, room_width - sprite_width / 2);
//y = clamp(y, sprite_height / 2, room_height - sprite_height / 2);


if place_meeting(x,y,obj_goal2)
{
    instance_destroy();
}


if (DownDirection)
{
    
    if (place_meeting(x,y + DownSpeed * DownMovementSpeed, obj_wall_east))
    {
        y += DownSpeed * DownMovementSpeed;
        
    }
    else if (place_meeting(x,y + DownSpeed * DownMovementSpeed, obj_wall_west))
    {
        y += DownSpeed * DownMovementSpeed;
    }
}


if (UpDirection)
{
    
    if (place_meeting(x,y + UpSpeed * UpMovementSpeed, obj_wall_east))
    {
        y += UpSpeed * UpMovementSpeed;
    }
    else if (place_meeting(x,y + UpSpeed * UpMovementSpeed, obj_wall_west))
    {
        y += UpSpeed * UpMovementSpeed;
    }
}

if (LeftDirection)
{   

    if (place_meeting(x + LeftSpeed * LeftMovementSpeed,y, obj_wall_north))
    {
        x += LeftSpeed * LeftMovementSpeed;
    }
    else if (place_meeting(x + LeftSpeed * LeftMovementSpeed,y, obj_wall_south))
    {
        x += LeftSpeed * LeftMovementSpeed;
    }
}

if (RightDirection)
{
    
    if (place_meeting(x + RightSpeed * RightMovementSpeed,y, obj_wall_north))
    {
        x += RightSpeed * RightMovementSpeed;
    }
    else if (place_meeting(x + RightSpeed * RightMovementSpeed,y, obj_wall_south))
    {
        x += RightSpeed * RightMovementSpeed;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
