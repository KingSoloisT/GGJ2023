<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementspeed = 30;
UpSpeed = 0;
DownSpeed = 0;
LeftSpeed = 0;
RightSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//device_get_tilt_x()
//device_get_tilt_y()
//device_get_tilt_z()

x = clamp(x,0,room_width);
y = clamp(y,0,room_height);

//if (place_meeting(x, y, obj_wall_vertical) || place_meeting(x, y, obj_wall_horizontal))
//{
//    place_free(x, y);
//}

//if (place_free(x + sprite_width / 2, y + sprite_height / 2))
//{
//    movementspeed;
//}

x += device_get_tilt_y()* movementspeed;
y += device_get_tilt_x()* movementspeed;



//-1 to 1



//DOWN
if (device_get_tilt_x() &gt; 0)
{
    DownSpeed = device_get_tilt_x();
    DownDirection = true;
    UpDirection = false;
}
//UP
if (device_get_tilt_x() &lt; 0)
{
    UpSpeed = device_get_tilt_x();
    DownDirection = false;
    UpDirection = true;
}
//LEFT
if (device_get_tilt_y() &lt; 0)
{
    LeftSpeed = device_get_tilt_y();
    LeftDirection = true;
    RightDirection = false;
}
//RIGHT
if (device_get_tilt_y() &gt; 0)
{
    RightSpeed = device_get_tilt_y();
    LeftDirection = false;
    RightDirection = true;
}
show_debug_message("Down = " + string(DownSpeed) + "Up = " + string(UpSpeed) + "Left = " + string(LeftSpeed) + "Right = " + string(RightSpeed));
show_debug_message("Down = " + string(DownDirection) + "Up = " + string(UpDirection) + "Left = " + string(LeftDirection) + "Right = " + string(RightDirection));


if place_meeting(x,y,obj_goal)
{
    instance_destroy();
}


//device_get_tilt_x() * movementspeed

//Up
//if (device_get_tilt_x() * movementspeed &amp;&amp; place_free(x,y))
//{
//    x = device_get_tilt_x() * movementspeed;
//}
//Left
//Down
//Right

//device_get_tilt_y LEFT &amp; RIGHT?
//device_get_tilt_x UP &amp; DOWN?




/*

if (keyboard_check(ord('W')) || keyboard_check(vk_up))
{
    obj_player.y += -1 * movementspeed;
}

if (keyboard_check(ord('A')) || keyboard_check(vk_left))
{
    obj_player.x += -1 * movementspeed;
}

if (keyboard_check(ord('S')) || keyboard_check(vk_down))
{
    obj_player.y += +1 * movementspeed;
}

if (keyboard_check(ord('D')) || keyboard_check(vk_right))
{
    obj_player.x += +1 * movementspeed;
}






/*
if (keyboard_check(ord('W')) || keyboard_check(vk_up))
{
    vspeed = -1;
}

if (keyboard_check(ord('A')) || keyboard_check(vk_left))
{
    hspeed = -1;
}

if (keyboard_check(ord('S')) || keyboard_check(vk_down))
{
    vspeed = +1;
}

if (keyboard_check(ord('D')) || keyboard_check(vk_right))
{
    hspeed = +1;
}
*/





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
