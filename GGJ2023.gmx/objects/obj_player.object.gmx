<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementspeed = 15;

DownDirection = false;
UpDirection = false;
LeftDirection = false;
RightDirection = false;

UpSpeed = 0;
DownSpeed = 0;
LeftSpeed = 0;
RightSpeed = 0;

DownMovementSpeed = movementspeed;
UpMovementSpeed = movementspeed;
LeftMovementSpeed = movementspeed;
RightMovementSpeed = movementspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//device_get_tilt_x()
//device_get_tilt_y()
//device_get_tilt_z()

x = clamp(x,0,room_width);
y = clamp(y,0,room_height);


if place_meeting(x,y,obj_goal)
{
    instance_destroy();
}

//-1 to 1

//DOWN
if (device_get_tilt_x() &gt; 0)
{
    //DownSpeed = device_get_tilt_x() * movementspeed; //Hopefully don't need to go back to this working speed way
    DownSpeed = device_get_tilt_x();
    DownDirection = true;
    UpDirection = false;
}
//UP
if (device_get_tilt_x() &lt; 0)
{
    UpSpeed = device_get_tilt_x();
    DownDirection = false;
    UpDirection = true;
}
//LEFT
if (device_get_tilt_y() &lt; 0)
{
    LeftSpeed = device_get_tilt_y();
    LeftDirection = true;
    RightDirection = false;
}
//RIGHT
if (device_get_tilt_y() &gt; 0)
{
    RightSpeed = device_get_tilt_y();
    LeftDirection = false;
    RightDirection = true;
}

/*DEBUGINFO
show_debug_message("Down = " + string(DownSpeed) + "Up = " + string(UpSpeed) + "Left = " + string(LeftSpeed) + "Right = " + string(RightSpeed));
show_debug_message("Down = " + string(DownDirection) + "Up = " + string(UpDirection) + "Left = " + string(LeftDirection) + "Right = " + string(RightDirection));
*/

if (DownDirection)
{

    //reset movement speed to allow to turn the other direction off a wall.
    UpMovementSpeed = movementspeed;
    
    if (place_free(x,y + movementspeed))
    {
        //reset movement speed if the space is clear.
        DownMovementSpeed = movementspeed;
    }
    
    if (place_free(x,y + DownSpeed * DownMovementSpeed))
    {
        y += DownSpeed * DownMovementSpeed;
    }
    else
    {
        DownMovementSpeed = SlowDown(DownMovementSpeed);
    }
    
    
}
if (UpDirection)
{
    
    //reset movement speed to allow to turn the other direction off a wall.
    DownMovementSpeed = movementspeed;
    
    if (place_free(x,y - movementspeed))
    {
        //reset movement speed if the space is clear.
        UpMovementSpeed = movementspeed;
    }
    
    if (place_free(x,y + UpSpeed * UpMovementSpeed))
    {
        y += UpSpeed * UpMovementSpeed;
    }
    else
    {
        UpMovementSpeed = SlowDown(UpMovementSpeed);
    }
} 
if (LeftDirection)
{
    //reset movement speed to allow to turn the other direction off a wall.
    RightMovementSpeed = movementspeed;
    
    if (place_free(x - movementspeed, y))
    {
        //reset movement speed if the space is clear.
        LeftMovementSpeed = movementspeed;
    }
    
    if (place_free(x + LeftSpeed * LeftMovementSpeed,y))
    {
        x += LeftSpeed * LeftMovementSpeed;
    }
    else
    {
        LeftMovementSpeed = SlowDown(LeftMovementSpeed);
    }
}
if (RightDirection)
{
    //reset movement speed to allow to turn the other direction off a wall.
    LeftMovementSpeed = movementspeed;
    
    if (place_free(x + movementspeed, y))
    {
        //reset movement speed if the space is clear.
        RightMovementSpeed = movementspeed;
    }
    
    if (place_free(x + RightSpeed * RightMovementSpeed,y))
    {
        x += RightSpeed * RightMovementSpeed;
    }
    else
    {
        RightMovementSpeed = SlowDown(RightMovementSpeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
